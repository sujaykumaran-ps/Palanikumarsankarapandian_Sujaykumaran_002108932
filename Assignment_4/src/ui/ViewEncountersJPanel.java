/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Encounter;
import model.EncounterHistory;
import model.Patient;
import model.PatientDirectory;
import model.VitalSigns;

/**
 *
 * @author sujay
 */
public class ViewEncountersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewEncountersJPanel
     */
    PatientDirectory patientList;
    Encounter encounter;
    VitalSigns vitalSigns;
    EncounterHistory encounterHistory;
    public ViewEncountersJPanel(PatientDirectory patientList, Encounter encounter, VitalSigns vitalSigns, EncounterHistory encounterHistory) {
        initComponents();
        this.patientList = patientList;
        this.encounter = encounter;
        this.vitalSigns = vitalSigns;
        this.encounterHistory = encounterHistory;
        populateViewTable();
        populateCommTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientEncounter = new javax.swing.JTable();
        txtEnc = new javax.swing.JTextField();
        lblEnc = new javax.swing.JLabel();
        txtBloodPressure = new javax.swing.JTextField();
        lblBloodPressure = new javax.swing.JLabel();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        txtBodyTemp = new javax.swing.JTextField();
        lblBodyTemp = new javax.swing.JLabel();
        txtRespirationRate = new javax.swing.JTextField();
        lblRespirationRate = new javax.swing.JLabel();
        txtPulseRate = new javax.swing.JTextField();
        lbPulseRate = new javax.swing.JLabel();
        txtInsurance = new javax.swing.JTextField();
        lblInsurance = new javax.swing.JLabel();
        lblCommuity = new javax.swing.JLabel();
        txtCommunity = new javax.swing.JTextField();
        btnViewEncounter = new javax.swing.JButton();
        btnAbnormalBP = new javax.swing.JButton();
        lblCountValue = new javax.swing.JLabel();
        btnRefreshTable = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCommunity = new javax.swing.JTable();
        btnFilterComm = new javax.swing.JButton();

        setBackground(new java.awt.Color(236, 253, 255));

        lblTitle.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("View Patient Encounters");

        tblPatientEncounter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Patient ID", "Community", "Encounter Date", "BP", "Body Temperature (in F)", "Pulse Rate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatientEncounter);

        lblEnc.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        lblEnc.setText("Encounter Date/Time :");

        txtBloodPressure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBloodPressureActionPerformed(evt);
            }
        });

        lblBloodPressure.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        lblBloodPressure.setText("Blood Pressure :");

        lblFirstName.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        lblFirstName.setText("First Name :");

        lblLastName.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        lblLastName.setText("Last Name :");

        txtLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastNameActionPerformed(evt);
            }
        });

        txtBodyTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBodyTempActionPerformed(evt);
            }
        });

        lblBodyTemp.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        lblBodyTemp.setText("Body Temperature :");

        txtRespirationRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRespirationRateActionPerformed(evt);
            }
        });

        lblRespirationRate.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        lblRespirationRate.setText("Respiration Rate :");

        txtPulseRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPulseRateActionPerformed(evt);
            }
        });

        lbPulseRate.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        lbPulseRate.setText("Pulse Rate :");

        lblInsurance.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        lblInsurance.setText("Patient ID :");

        lblCommuity.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        lblCommuity.setText("Community :");

        btnViewEncounter.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        btnViewEncounter.setText("View Encounter Details");
        btnViewEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewEncounterActionPerformed(evt);
            }
        });

        btnAbnormalBP.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        btnAbnormalBP.setText("Filter Abnormal BP");
        btnAbnormalBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbnormalBPActionPerformed(evt);
            }
        });

        lblCountValue.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        lblCountValue.setForeground(new java.awt.Color(255, 0, 0));

        btnRefreshTable.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        btnRefreshTable.setText("Refresh Table");
        btnRefreshTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTableActionPerformed(evt);
            }
        });

        tblCommunity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Community Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCommunity);

        btnFilterComm.setFont(new java.awt.Font("Lucida Sans", 1, 10)); // NOI18N
        btnFilterComm.setText("Filter By Community");
        btnFilterComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterCommActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 1344, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRefreshTable)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(235, 235, 235)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(100, 100, 100)
                                    .addComponent(txtPulseRate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(lbPulseRate))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(121, 121, 121)
                                    .addComponent(btnViewEncounter)
                                    .addGap(86, 86, 86)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnAbnormalBP, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblCountValue, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblInsurance)
                                            .addGap(31, 31, 31)
                                            .addComponent(txtInsurance, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblCommuity)
                                            .addGap(31, 31, 31)
                                            .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblFirstName)
                                                .addComponent(lblLastName))
                                            .addGap(31, 31, 31)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGap(128, 128, 128)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblEnc)
                                                .addComponent(lblBloodPressure))
                                            .addGap(31, 31, 31)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtEnc, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblBodyTemp)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(13, 13, 13)
                                                    .addComponent(lblRespirationRate)))
                                            .addGap(29, 29, 29)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtRespirationRate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtBodyTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addComponent(btnFilterComm, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(lblTitle)
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefreshTable)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnViewEncounter)
                            .addComponent(btnAbnormalBP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCountValue, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnFilterComm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEnc)
                    .addComponent(txtEnc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBloodPressure)
                    .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBodyTemp)
                    .addComponent(txtBodyTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInsurance)
                    .addComponent(txtInsurance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRespirationRate)
                    .addComponent(txtRespirationRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCommuity)
                    .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPulseRate)
                    .addComponent(txtPulseRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtBloodPressureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBloodPressureActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtBloodPressureActionPerformed

    private void txtLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastNameActionPerformed

    private void txtBodyTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBodyTempActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBodyTempActionPerformed

    private void txtRespirationRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRespirationRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRespirationRateActionPerformed

    private void txtPulseRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPulseRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPulseRateActionPerformed

    private void btnViewEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewEncounterActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPatientEncounter.getSelectedRow();

        if(selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a Patient Detail to View Encounter Details !!!");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblPatientEncounter.getModel();
        Patient selectedPatientEncounter = (Patient)model.getValueAt(selectedRowIndex, 0);

        txtFirstName.setText(selectedPatientEncounter.getPersonFirstName());
        txtLastName.setText(selectedPatientEncounter.getPersonLastName());
        txtInsurance.setText(selectedPatientEncounter.getPatientId());
        txtCommunity.setText(selectedPatientEncounter.getCommunityName());
        txtEnc.setText(selectedPatientEncounter.getEncounter().getEncounterDate());
        txtBloodPressure.setText(String.valueOf(selectedPatientEncounter.getVitalSigns().getBloodPressure()));
        txtBodyTemp.setText(String.valueOf(selectedPatientEncounter.getVitalSigns().getBodyTemp()));
        txtPulseRate.setText(String.valueOf(selectedPatientEncounter.getVitalSigns().getPulseRate()));
        txtRespirationRate.setText(String.valueOf(selectedPatientEncounter.getVitalSigns().getRespirationRate()));
        
        
        
    }//GEN-LAST:event_btnViewEncounterActionPerformed

    private void btnAbnormalBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbnormalBPActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblPatientEncounter.getModel();
        model.setRowCount(0);
        
        for(Patient pat : patientList.getPatientList()){
            if(pat.getVitalSigns().getBloodPressure() >= 130 )
            {
            Object[] row = new Object[8];
            row[0] = pat;
            row[1] = pat.getPersonLastName();
            row[2] = pat.getPatientId();
            row[3] = pat.getCommunityName();
            row[4] = pat.getEncounter().getEncounterDate();
            row[5] = pat.getVitalSigns().getBloodPressure();
            row[6] = pat.getVitalSigns().getBodyTemp();
            row[7] = pat.getVitalSigns().getPulseRate();
            
            model.addRow(row);
            }
        }
        lblCountValue.setText("Abnormal BP Count -  " + String.valueOf(model.getRowCount()));
    }//GEN-LAST:event_btnAbnormalBPActionPerformed

    private void btnRefreshTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTableActionPerformed
        populateViewTable();
        lblCountValue.setText("");
    }//GEN-LAST:event_btnRefreshTableActionPerformed

    private void btnFilterCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterCommActionPerformed
        int selectedRowIndex = tblCommunity.getSelectedRow();
        String selectedComm = String.valueOf(tblCommunity.getValueAt(selectedRowIndex, 0));

        if(selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a Community Name.");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblPatientEncounter.getModel();
        model.setRowCount(0);

        for(Patient pat : patientList.getPatientList()){
            if(pat.getCommunityName().equals(selectedComm))
            {
                Object[] row = new Object[8];
                row[0] = pat;
                row[1] = pat.getPersonLastName();
                row[2] = pat.getPatientId();
                row[3] = pat.getCommunityName();
                row[4] = pat.getEncounter().getEncounterDate();
                row[5] = pat.getVitalSigns().getBloodPressure();
                row[6] = pat.getVitalSigns().getBodyTemp();
                row[7] = pat.getVitalSigns().getPulseRate();

                model.addRow(row);

            }
        }

    }//GEN-LAST:event_btnFilterCommActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbnormalBP;
    private javax.swing.JButton btnFilterComm;
    private javax.swing.JButton btnRefreshTable;
    private javax.swing.JButton btnViewEncounter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbPulseRate;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblBodyTemp;
    private javax.swing.JLabel lblCommuity;
    private javax.swing.JLabel lblCountValue;
    private javax.swing.JLabel lblEnc;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblInsurance;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblRespirationRate;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblCommunity;
    private javax.swing.JTable tblPatientEncounter;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtBodyTemp;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtEnc;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtInsurance;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtPulseRate;
    private javax.swing.JTextField txtRespirationRate;
    // End of variables declaration//GEN-END:variables

    private void populateViewTable() {
        DefaultTableModel model = (DefaultTableModel) tblPatientEncounter.getModel();
        model.setRowCount(0);
        patientList.getPatientList().stream().map(pat -> {
            Object[] row = new Object[8];
            row[0] = pat;
            row[1] = pat.getPersonLastName();
            row[2] = pat.getPatientId();
            row[3] = pat.getCommunityName();
            row[4] = pat.getEncounter().getEncounterDate();
            row[5] = pat.getVitalSigns().getBloodPressure();
            row[6] = pat.getVitalSigns().getBodyTemp();
            row[7] = pat.getVitalSigns().getPulseRate();
            return row;            
        }).forEachOrdered(row -> {
            model.addRow(row);
        });
    }

    private void populateCommTable() {
        Set<String> uniqueComm = new HashSet<>();
        for(Patient pat : patientList.getPatientList()) {
        uniqueComm.add(pat.getCommunityName());
        }
        DefaultTableModel model = (DefaultTableModel) tblCommunity.getModel();
        model.setRowCount(0);
        for(String c : uniqueComm){
        Object[] row = new Object[1];
        row[0] = c;
        model.addRow(row);
        }
        
    }
}
